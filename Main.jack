class Main{

static Array tiles;
static int scoreP1, scoreP2, tile, currPlayer, i, tilecount;
static bool finished, reset, flag;

/*
 * Arbitrary drawing functions
 */
function void drawTicTacToe()
{
	var int j, k;
	let i = 49; // Ascii "1"
	let j = 0;

	// set color to black for drawing
	do Screen.setColor(true);

	// vertical lines
	do Screen.drawLine(85, 1, 85, 254);
	do Screen.drawLine(2*87, 1, 2*87, 254);

	// horizontal lines
	do Screen.drawLine(1, 85, 254, 85);
	do Screen.drawLine(1, 2*87, 254, 2*87);
	

	// number boxes 1-9
	while(~(i = 58)){
		let k = 0;
		while(~(k > 22)){
			do Output.moveCursor(j, k);
			do Output.printChar(i);
			let i=i+1;
			let k=k+11;
		}
		let j=j+8;
	}
	return;
}

function void drawBoard()
{
	do Main.drawTicTacToe();

	// game stats
	do Screen.drawRectangle(256, 0, 511, 255);
	
	// player 1
	do Output.moveCursor(1,33);
	do Output.printString("Player 1 (X): ");
	do Output.printInt(scoreP1);
	
	// player 2
	do Output.moveCursor(2,33);
	do Output.printString("Player 2 (O): ");
	do Output.printInt(scoreP2);
	    
	// Current Player
	do Output.moveCursor(4, 33);
	do Output.printString("Current Player: ");
	do Output.printInt(currPlayer);
	
	// Controls
	do Output.moveCursor(22, 33);
	do Output.printString("Controls: (q)uit and (r)eset");
	do Output.moveCursor(22, 63);
	return;
}

function void drawX(int x, int y)
{
	do Screen.drawLine(x-40, y+40, x+40, y-40);
	do Screen.drawLine(x-40, y-40, x+40, y+40);
	return;
}

/*
 * These two find the center of the entered tile.
 * Arbitrary by virtue of an arbitary screen.
 */
function int getAbcissa(int n)
{
	if((n=1) | (n=4) | (n=7)){
		return 42;
	}
	if((n=2) | (n=5) | (n=8)){
		return 129;
	}
	return 214;
}

function int getOrdinate(int n)
{
	if((n=1) | (n=2) | (n=3)){
		return 42;
	}
	if((n=4) | (n=5) | (n=6)){
		return 129;
	}
	return 214;
}

/*
 * Existence testing 
 */
function bool isDiag(Array a)
{
	if(((a[0] = a[4]) & (a[4] = a[8])) |
	   ((a[2] = a[4]) & (a[4] = a[6]))){
		return true;
	}
	return false;
}

function bool isHorz(Array a)
{
	if(((a[0] = a[1]) & (a[1] = a[2])) | 
	   ((a[3] = a[4]) & (a[4] = a[5])) |
	   ((a[6] = a[7]) & (a[7] = a[8]))){
		return true;
	}
	return false;
}

function bool isVert(Array a)
{
	if(((a[0] = a[3]) & (a[3] = a[6])) | 
	   ((a[1] = a[4]) & (a[4] = a[7])) |
	   ((a[2] = a[5]) & (a[5] = a[8]))){
		return true;
	}
	return false;
}

function bool isDigit(int n)
{
	if((n = 1) | (n = 2) | (n = 3) |
	   (n = 4) | (n = 5) | (n = 6) |
	   (n = 7) | (n = 8) | (n = 9)){
		return true;
	}
	else{
		return false;
	}
}


function void init()
{
	let tiles = Array.new(9);
	let tilecount = 0;
	let currPlayer = 1;
	let finished = false;

 	do Screen.clearScreen();
	do Main.drawBoard();
	do Output.moveCursor(22, 63); // Bottom right corner
	
	// reduce collisions with our entered 1 and 2 variables
	let i = 0;
	while(i < 9){
		let tiles[i] = i+3;
		let i = i + 1;
	}
	return;
}

function void main()
{
	let scoreP1 = 0;
	let scoreP2 = 0;
	
	do Main.init();
	
	// Main loop of control, continue until "finished"
	while(~(finished)){
	/* we have to moveCursor so much because for whatever reason we HAVE to print
	 * to the screen when reading a keyboard character. no getchar(); (snack car)
	 */
		let tile = Keyboard.readChar();
		do Output.moveCursor(22, 63);
		let flag = true;
		
		if(Main.isDigit(tile-48)){
			if((tiles[tile-49] = 1) | (tiles[tile-49] = 2)){
				let flag = false;
			}
			else{
				let tile = tile - 48;
				if(currPlayer = 1){
					let tiles[tile-1] = 1;
					let currPlayer = 2;
					do Main.drawX(Main.getAbcissa(tile), Main.getOrdinate(tile));
				}
				else{
					let tiles[tile-1] = 2;
					let currPlayer = 1;
					do Screen.drawCircle(Main.getAbcissa(tile), Main.getOrdinate(tile), 40);
					do Screen.setColor(0);
					do Screen.drawCircle(Main.getAbcissa(tile), Main.getOrdinate(tile), 38);
					do Screen.setColor(1);
				}
				let tilecount = tilecount + 1;
				do Output.moveCursor(4, 33);
				do Output.printString("Current Player: ");
				do Output.printInt(currPlayer);
				do Output.moveCursor(22, 63);   
			}       
		}
        
	
        	if(tilecount = 9){
			let flag = false;
			do Main.init();
        	}

	        if(~(Main.isDigit(tile-48)) & flag){
	      		if((tile = 82) | (tile = 114)){		// (r)eset
				let scoreP1 = 0;
				let scoreP2 = 0;
	          		do Main.init();
			}
	            	if((tile = 81) | (tile = 113)){		// (q)uit
	              		let finished = true;
			}
			else{
				let flag = false;
			}
	        }
	
		if(Main.isVert(tiles) | Main.isHorz(tiles) | Main.isDiag(tiles)){
			if(currPlayer = 2){
				let scoreP1 = scoreP1 + 1;
			}
			else{
				let scoreP2 = scoreP2 + 1;
			}
			do Main.init();
		}
	}
	do Screen.clearScreen();
	return;
}
}
